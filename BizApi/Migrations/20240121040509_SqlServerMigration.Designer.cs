// <auto-generated />
using System;
using BizApi.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BizApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240121040509_SqlServerMigration")]
    partial class SqlServerMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BizApi.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "65155",
                            Description = "Soft drinks, coffees, teas, beers, and ales",
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 2,
                            Code = "511516",
                            Description = "Sweet and savory sauces, relishes, spreads, and seasonings",
                            Name = "Condiments"
                        },
                        new
                        {
                            Id = 3,
                            Code = "998816",
                            Description = "Desserts, candies, and sweet breads",
                            Name = "Confections"
                        },
                        new
                        {
                            Id = 4,
                            Code = "8855447",
                            Description = "Cheeses",
                            Name = "Dairy Products"
                        },
                        new
                        {
                            Id = 5,
                            Code = "6646485",
                            Description = "Breads, crackers, pasta, and cereal",
                            Name = "Grains/Cereals"
                        },
                        new
                        {
                            Id = 6,
                            Code = "8744581",
                            Description = "Prepared meats",
                            Name = "Meat/Poultry"
                        },
                        new
                        {
                            Id = 7,
                            Code = "219848198",
                            Description = "Dried fruit and bean curd",
                            Name = "Produce"
                        },
                        new
                        {
                            Id = 8,
                            Code = "2154548",
                            Description = "Seaweed and fish",
                            Name = "Seafood"
                        });
                });

            modelBuilder.Entity("BizApi.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Obere Str. 57",
                            City = "Berlin",
                            Code = "35981655",
                            Contact = "Maria Anders",
                            Email = "alb@yahoo.com",
                            ImageUrl = "",
                            Name = "Alfreds Futterkiste",
                            Phone = "030-0074321",
                            Postal = "12209"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Avda. de la Constitución 2222",
                            City = "México D.F.",
                            Code = "21891648",
                            Contact = "Ana Trujillo",
                            Email = "anna@yahoo.com",
                            ImageUrl = "",
                            Name = "Ana Trujillo Emparedados y helados",
                            Phone = "030-0074321",
                            Postal = "05021"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Mataderos  2312",
                            City = "México D.F.",
                            Code = "54818898",
                            Contact = "Antonio Moreno",
                            Email = "antonio@yahoo.com",
                            ImageUrl = "",
                            Name = "Antonio Moreno Taquería",
                            Phone = "(5) 555-3932",
                            Postal = "05023"
                        },
                        new
                        {
                            Id = 4,
                            Address = "120 Hanover Sq.",
                            City = "London",
                            Code = "9988557",
                            Contact = "Thomas Hardy",
                            Email = "around@yahoo.com",
                            ImageUrl = "",
                            Name = "Around the Horn",
                            Phone = "(171) 555-7788",
                            Postal = "WA1 1DP"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Berguvsvägen  8",
                            City = "Luleå",
                            Code = "6545748",
                            Contact = "Christina Berglund",
                            Email = "berg@yahoo.com",
                            ImageUrl = "",
                            Name = "Berglunds snabbköp",
                            Phone = "0921-12 34 65",
                            Postal = "S-958 22"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Forsterstr. 57",
                            City = "Mannheim",
                            Code = "3551578",
                            Contact = "Hanna Moos",
                            Email = "blaurer@yahoo.com",
                            ImageUrl = "",
                            Name = "Blauer See Delikatessen",
                            Phone = "0621-08460",
                            Postal = "68306"
                        },
                        new
                        {
                            Id = 7,
                            Address = "24, place Kléber",
                            City = "Strasbourg",
                            Code = "4588745",
                            Contact = "Frédérique Citeaux",
                            Email = "blondes@yahoo.com",
                            ImageUrl = "",
                            Name = "Blondesddsl père et fils",
                            Phone = "88.60.15.31",
                            Postal = "67000"
                        },
                        new
                        {
                            Id = 8,
                            Address = "C/ Araquil, 67",
                            City = "Madrid",
                            Code = "7885698",
                            Contact = "Martín Sommer",
                            Email = "bolido@yahoo.com",
                            ImageUrl = "",
                            Name = "Bólido Comidas preparadas",
                            Phone = "(91) 555 22 82",
                            Postal = "28023"
                        },
                        new
                        {
                            Id = 9,
                            Address = "12, rue des Bouchers",
                            City = "Marseille",
                            Code = "14585789",
                            Contact = "Laurence Lebihan",
                            Email = "bonapp@yahoo.com",
                            ImageUrl = "",
                            Name = "Bon app'",
                            Phone = "91.24.45.40",
                            Postal = "13008"
                        },
                        new
                        {
                            Id = 10,
                            Address = "23 Tsawassen Blvd.",
                            City = "Tsawassen",
                            Code = "85487125",
                            Contact = "Elizabeth Lincoln",
                            Email = "bottomdollar@yahoo.com",
                            ImageUrl = "",
                            Name = "Bottom-Dollar Markets",
                            Phone = "(604) 555-4729",
                            Postal = "T2F 8M4"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Fauntleroy Circus",
                            City = "London",
                            Code = "2125469",
                            Contact = "Victoria Ashworth",
                            Email = "beverages@yahoo.com",
                            ImageUrl = "",
                            Name = "B's Beverages",
                            Phone = "(171) 555-1212",
                            Postal = "EC2 5NT"
                        });
                });

            modelBuilder.Entity("BizApi.Data.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Qty")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BizApi.Data.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("QtyProduct")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BizApi.Data.Entities.ProductDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<double>("QtyMaterial")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QtyProduct")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("BizApi.Data.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<double>("QtyMaterial")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cerrito 333",
                            City = "Buenos Aires",
                            Code = "3545168",
                            Contact = "Patricio Simpson",
                            Email = "cactus@yahoo.com",
                            ImageUrl = "",
                            Name = "Cactus Comidas para llevar",
                            Phone = "(1) 135-5555",
                            Postal = "1010"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Sierras de Granada 9993",
                            City = "México D.F.",
                            Code = "648945515",
                            Contact = "Francisco Chang",
                            Email = "centro@yahoo.com",
                            ImageUrl = "",
                            Name = "Centro comercial Moctezuma",
                            Phone = "(5) 555-3392",
                            Postal = "05022"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Hauptstr. 29",
                            City = "Bern",
                            Code = "318654",
                            Contact = "Yang Wang",
                            Email = "chop@yahoo.com",
                            ImageUrl = "",
                            Name = "Chop-suey Chinese",
                            Phone = "0452-076545",
                            Postal = "3012"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Av. dos Lusíadas, 23",
                            City = "Sao Paulo",
                            Code = "569698547",
                            Contact = "Pedro Afonso",
                            Email = "comercio@yahoo.com",
                            ImageUrl = "",
                            Name = "Comércio Mineiro",
                            Phone = "(11) 555-7647",
                            Postal = "05432-043"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Berkeley Gardens 12  Brewery",
                            City = "London",
                            Code = "6542247",
                            Contact = "Elizabeth Brown",
                            Email = "consolidated@yahoo.com",
                            ImageUrl = "",
                            Name = "Consolidated Holdings",
                            Phone = "(171) 555-2282",
                            Postal = "WX1 6LT"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Walserweg 21",
                            City = "Aachen",
                            Code = "41578",
                            Contact = "Sven Ottlieb",
                            Email = "drachen@yahoo.com",
                            ImageUrl = "",
                            Name = "Drachenblut Delikatessen",
                            Phone = "0241-039123",
                            Postal = "52066"
                        },
                        new
                        {
                            Id = 7,
                            Address = "67, rue des Cinquante Otages",
                            City = "Nantes",
                            Code = "332654",
                            Contact = "Janine Labrune",
                            Email = "dumonde@yahoo.com",
                            ImageUrl = "",
                            Name = "Du monde entier",
                            Phone = "40.67.88.88",
                            Postal = "44000"
                        },
                        new
                        {
                            Id = 8,
                            Address = "35 King George",
                            City = "London",
                            Code = "645879",
                            Contact = "Ann Devon",
                            Email = "eastern@yahoo.com",
                            ImageUrl = "",
                            Name = "Eastern Connection",
                            Phone = "(171) 555-0297",
                            Postal = "WX3 6FW"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kirchgasse 6",
                            City = "Graz",
                            Code = "125487",
                            Contact = "Roland Mendel",
                            Email = "ernst@yahoo.com",
                            ImageUrl = "",
                            Name = "Ernst Handel",
                            Phone = "7675-3425",
                            Postal = "8010"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Rua Orós, 92",
                            City = "Sao Paulo",
                            Code = "4526987",
                            Contact = "Aria Cruz",
                            Email = "familia@yahoo.com",
                            ImageUrl = "",
                            Name = "Familia Arquibaldo",
                            Phone = "(11) 555-9857",
                            Postal = "05442-030"
                        },
                        new
                        {
                            Id = 11,
                            Address = "C/ Moralzarzal, 86",
                            City = "Madrid",
                            Code = "1254873",
                            Contact = "Diego Roel",
                            Email = "fissa@yahoo.com",
                            ImageUrl = "",
                            Name = "FISSA Fabrica Inter. Salchichas S.A.",
                            Phone = "(91) 555 94 44",
                            Postal = "28034"
                        });
                });

            modelBuilder.Entity("BizApi.Data.Entities.Material", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Order", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BizApi.Data.Entities.OrderDetail", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("BizApi.Data.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Product", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BizApi.Data.Entities.ProductDetail", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Material", "Material")
                        .WithMany("ProductDetails")
                        .HasForeignKey("MaterialId")
                        .IsRequired();

                    b.HasOne("BizApi.Data.Entities.Product", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Production", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Product", "Product")
                        .WithMany("Productions")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Purchase", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("BizApi.Data.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("BizApi.Data.Entities.Material", "Material")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("MaterialId")
                        .IsRequired();

                    b.HasOne("BizApi.Data.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Material", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ProductDetails");

                    b.Navigation("Productions");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Purchase", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("BizApi.Data.Entities.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
